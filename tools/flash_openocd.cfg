

#/****************************************************************************
# *
# *   Copyright (C) 2022 bsvtgc@gmail.com. All rights reserved.
# *   Author: Vincent <bsvtgc@gmail.com>
# *
# ****************************************************************************/

# -----------------------------------------------------#

# This is a plain vanilla openOCD config to load the 
# executable into FE310-G002 target on hifive1-revb
# board. 

# ----------------------------------------------------#

adapter speed 4000

adapter driver jlink
transport select jtag

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x20000913

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME.0 riscv -chain-position $_TARGETNAME

# set work area in RAM 0x8000_0000 with size 0x4000

$_TARGETNAME.0 configure -work-area-phys 0x80000000 -work-area-size 0x4000 -work-area-backup 0

# No virtual to mem conversion

riscv set_enable_virt2phys off
riscv set_enable_virtual off

# Configure flash driver
flash bank spi0 fespi 0x20000000 0 0 0 riscv.cpu.0 0x10014000

# Run stage
init

# set JTAG command version 3 to be used
jlink jtag 3

# Reset after init
reset

# Halt target
halt
####################################################


#proc asic_rom_load { program {addr "0x20000000"} {no_run ""} } {
  halt 100  ;# includes wait_halt 100

  set program "FINAL_LOAD.bin" 

  set addr [expr 0x20000000]
  echo "addr is ${addr}"

  #set no_run ""

  # sector size also defined in ...src/flash/nor/core.h:45 (uint32_t) size
  set secsz [expr 0x1000]  ;# 4K sectors issi is25lp128d, typ. most NOR flash
  echo "sector size is ${secsz}"

  set len [file size ${program}]
  #set len [expr 0x1FFE]
  echo "prog len is ${len}"

  set endsec [expr (${len}/${secsz})+((${len}-(${len}/${secsz})*${secsz})>0)-1]
  echo "endsec  is ${endsec}"

  #-----
  # equivalent implementation in /bin/bash script, for use in, e.g., mk files, is shown below:
  #$(eval SECSZ=$(shell echo "ibase=16; 1000" | bc))
  #$(eval LEN=$(shell <${PROGRAM}-rom.bin wc -c))
  #$(eval ENDSEC=$(shell echo "(${LEN}/${SECSZ})+((${LEN}-(${LEN}/${SECSZ})*${SECSZ})>0)-1" | bc))
  #-----

  set erased_value 255  ;# also defined in ...src/flash/nor/core.h:104 (uint8_t) erased_value
  set is_erased 1
    for {set i 0} { ($i <= $endsec) && $is_erased } {incr i} {
        echo "Erasing flash sec $i"
    riscv.cpu.0 mem2array buf 8 [expr ${addr} + ${secsz} * $i] ${secsz}
    foreach idx [array names buf] {
      if {$buf($idx) != ${erased_value}} {
        set is_erased 0
      }
    }
  }

  echo "Flash is_erased $is_erased "

  # in case of verify_bank pass, message returned is 'contents match'
  # in case of verify_bank fail, message returned is 'contents differ', diff lines, abrupt exit
  #

  set rc [catch {flash verify_bank 0 ${program}} err]  ;# trap exit on verify fail
  if {[expr $rc == 0]} {
    echo "flash device already up to date - nothing to do"
  } else {
    echo [flash protect 0 0 ${endsec} off]
    if {! $is_erased} {
      echo [flash erase_sector 0 0 ${endsec}]
    }
    echo [flash write_bank 0 ${program}]
    echo [flash verify_bank 0 ${program}]
    echo [flash protect 0 0 ${endsec} on]
  }

  #if {[expr [string length $no_run] == 0]} {
    #resume ${addr}
  #}
#}

#shutdown

#exit